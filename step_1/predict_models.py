# -*- coding: utf-8 -*-
"""predict_models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k3aC2mVdjUlZFXqIm10WlidlPIneOwM3
"""

from keras.applications.vgg16 import VGG16
from keras.applications.resnet50 import ResNet50
from keras.applications.mobilenet_v2 import MobileNetV2
from keras.applications.mobilenet import MobileNet
from keras import backend as K
import tensorflow as tf
import time
import os
import gc
import keras as k
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from sklearn.metrics import fbeta_score
import cv2
from tqdm import tqdm
from keras.optimizers import Adam
from keras.callbacks import EarlyStopping, History
import pandas as pd
import numpy as np
import re

'''
Descomentar essa linha da primeira vez que for usar para poder dezipar a pasta de imagens
'''
#!apt-get install tar
!apt-get install p7zip-full
# Login
from google.colab import drive
drive.mount('/content/drive')

!7z e '/content/drive/My Drive/test-jpg.tar.7z'
test = !tar -xvf 'test-jpg.tar'

!7z e '/content/drive/My Drive/test-jpg-additional.tar.7z'
test_add = !tar -xvf 'test-jpg-additional.tar'

'''
Passa o caminho de todas as imagens na ordem correta para train_images
'''
DIR = 'test-jpg/test_'
DIR2 = 'test-jpg-additional/file_'
test_images = []

for i in range(0, len(test)-1):
  test_images.append(DIR + str(i) + '.jpg')

for i in range(0, len(test_add)-1):
  test_images.append(DIR2 + str(i) + '.jpg')

labels = [
          'haze',
          'road',
          'blow_down',
          'primary',
          'clear',
          'slash_burn',
          'cloudy',
          'partly_cloudy',
          'conventional_mine',
          'bare_ground',
          'cultivation',
          'water',
          'artisinal_mine',
          'blooming',
          'agriculture',
          'selective_logging',
          'habitation'
         ]

from keras.models import load_model
import gc 

input_size = 128
input_channels = 3
bs=128
#base_model = VGG16(include_top=False, input_shape=(input_size, input_size, input_channels))
#base_model = ResNet50(include_top=False, input_shape=(input_size, input_size, input_channels))
#base_model = MobileNet(include_top=False, input_shape=(input_size, input_size, input_channels))
base_model = MobileNetV2(include_top=False, input_shape=(input_size, input_size, input_channels))

model = Sequential()
model.add(base_model)
model.add(Flatten())
model.add(Dense(17, activation='sigmoid'))
print(model.summary()) 
model.load_weights('/content/drive/My Drive/kaggle/mobilev2-test2.h5')

x_kaggle = []

for f in tqdm(test_images[:40669], miniters=1000):
  img_test = cv2.imread(f)
  x_kaggle.append(cv2.resize(img_test, (input_size, input_size)))
x_kaggle = np.array(x_kaggle, np.float16) / 255.
kaggle_resp1 = model.predict(np.array(x_kaggle), batch_size = bs)

del x_kaggle
gc.collect() 

x_kaggle =[]

for f in tqdm(test_images[40669:], miniters=1000):
  img_test = cv2.imread(f)
  x_kaggle.append(cv2.resize(img_test, (input_size, input_size)))
x_kaggle = np.array(x_kaggle, np.float16) / 255.
kaggle_resp2 = model.predict(np.array(x_kaggle), batch_size = bs)

del x_kaggle
gc.collect()

kaggle_resp = np.concatenate((kaggle_resp1, kaggle_resp2))

resp = kaggle_resp > 0.2
labels_array = np.array(labels)

tags_resp = [] 

for r in resp:
  tags_resp.append(" ".join(labels_array[np.where(r)[0]]))

def return_filename(x):
  result = re.search('/(.*).jpg', x)
  return result.group(1)

img_idx = [ return_filename(x) for x in test_images ]

df_kaggle = pd.DataFrame({'image_name':img_idx, 'tags':tags_resp})

df_kaggle.to_csv('/content/mobilev2-test2-submission.csv', index=False)

df_kaggle

